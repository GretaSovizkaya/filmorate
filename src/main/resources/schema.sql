create TABLE IF NOT EXISTS USERS
(
	USER_ID INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	USER_NAME VARCHAR(255) NOT NULL,
	EMAIL VARCHAR(255) NOT NULL,
	LOGIN VARCHAR(255) NOT NULL,
	BIRTHDAY DATE,
	CONSTRAINT UNIQUE_EMAIL UNIQUE (EMAIL),
    CONSTRAINT UNIQUE_LOGIN UNIQUE (LOGIN)
);

create TABLE IF NOT EXISTS RATING_MPA
(
	RATING_ID INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	RATING_NAME VARCHAR(100),
	CONSTRAINT rating_id_pk PRIMARY KEY (rating_id)
);


create TABLE IF NOT EXISTS FILMS
(
	FILM_ID INT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	FILM_NAME VARCHAR(255) NOT NULL,
	DESCRIPTION VARCHAR(255),
	RELEASE_DATE DATE,
    DURATION INT,
    rating_id INTEGER REFERENCES rating_mpa (rating_id),
    CONSTRAINT film_id_pk PRIMARY KEY (film_id)
);

create TABLE IF NOT EXISTS GENRE
(
	GENRE_ID INT PRIMARY KEY AUTO_INCREMENT,
	NAME_GENRE VARCHAR(50) not null,
	CONSTRAINT genre_id_pk PRIMARY KEY (genre_id)
);

create TABLE IF NOT EXISTS GENRES_FILM (
	 film_id INTEGER NOT NULL REFERENCES films (film_id),
     genre_id INTEGER not null REFERENCES genre (genre_id) ,
     CONSTRAINT film_genres_pk PRIMARY KEY (film_id, genre_id),
     CONSTRAINT fk_film FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE,
     CONSTRAINT fk_genre FOREIGN KEY (genre_id) REFERENCES genre (genre_id) ON DELETE CASCADE
);

create TABLE IF NOT EXISTS LIKES
(
	FILM_ID INT REFERENCES FILMS (FILM_ID) ON delete CASCADE,
	USER_ID INT REFERENCES USERS (USER_ID) ON delete CASCADE,
	CONSTRAINT likes_pk PRIMARY KEY (film_id, user_id)
);


create TABLE IF NOT EXISTS FRIENDS
(
	USER_ID INT REFERENCES USERS (USER_ID) ON DELETE CASCADE,
	FRIEND_ID INT REFERENCES USERS (USER_ID) ON DELETE CASCADE,
	STATUS VARCHAR(50),
	CONSTRAINT id PRIMARY KEY (user_id,friend_id)
);